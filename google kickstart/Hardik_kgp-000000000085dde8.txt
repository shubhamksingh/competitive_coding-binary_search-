// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
// #include <atcoder/convolution>
// #include <atcoder/modint>
using namespace std;
// using namespace atcoder;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template <class c, class cmp = less<c> > using ordered_set = tree<c, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
#define IOS ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...) 
#endif
template<class T> ostream& operator<<(ostream &os, vector<T> V) {os << "[ "; for(auto v : V) os << v << " "; return os << "]";}
template<class L, class R> ostream& operator<<(ostream &os, pair<L,R> P) {return os << "(" << P.first << "," << P.second << ")";}
template <typename T,typename U>pair<T,U> operator+(const pair<T,U> & l,const std::pair<T,U> & r) { return {l.first+r.first,l.second+r.second};}
typedef long long int ll;
const ll mod =998244353;
const int maxn = 300002;
#define endl '\n'
#define int ll
#define ld long double
#define all(x) (x).begin(),(x).end()

int32_t main()
{ 
    IOS

    

     int testcases = 1;
    cin>>testcases;
    for(int test = 1;test<=testcases;test++)
    {
      cout<<"Case #"<<test<<": ";
      string s;
      cin >> s;
      int n = s.size();
      string ans = s;
      vector<pair<char,int>> v;
      for(int i = 0;i<n;i++) {
        v.push_back({s[i] ,i});
      }

      sort(all(v));


      // cout << v << endl;
      for(int j = 0;j<n;j++){
        int i = v[j].second;
        ans[i] = v[(j + n/2)%n].first;
      }

      // cout << ans << endl;

      bool check = 1;
      for(int i = 0;i<n;i++){
        if(s[i] == ans[i]){
          check = false;
        }
      }

      if(check) cout << ans << endl;
      else cout << "IMPOSSIBLE" << endl;

    }


    
}







	


  